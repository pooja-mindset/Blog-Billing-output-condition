*&---------------------------------------------------------------------*
*& Include          ZPVMUSAI_BLOG_VV31_F01
*&---------------------------------------------------------------------*


CLASS lcl_zvv31_recipient_email DEFINITION  .

  PUBLIC SECTION  .

    TYPES: BEGIN OF gty_sofm_object_key ,
             folder_type   TYPE sofm-foltp,
             folder_year   TYPE sofm-folyr,
             folder_number TYPE sofm-folno,
             doc_type      TYPE sofm-doctp,
             doc_year      TYPE sofm-docyr,
             doc_number    TYPE sofm-docno,
             forwardername TYPE soub-usrnam,
             doc_id        TYPE sofolenti1-doc_id,
           END OF gty_sofm_object_key  ,
           BEGIN OF gty_bp_knumh_email ,
             kunnr  TYPE kunnr,
             kschl  TYPE kschl,
             knumh  TYPE knumh,
             tdname TYPE nach-tdname,
             mail   TYPE adr6-smtp_addr,
           END OF gty_bp_knumh_email ,
           gtt_bp_knumh_email TYPE STANDARD TABLE OF gty_bp_knumh_email WITH KEY kunnr,
           gtt_kunnr_range    TYPE RANGE OF kunnr,
           gtt_output_type_rn TYPE RANGE OF kschl.

    CONSTANTS: c_bp_kappl_v3 TYPE kappl VALUE 'V3' .

    METHODS: create_cond_rec_with_recipent IMPORTING iv_business_partner   TYPE  kunnr
                                                     iv_output_type        TYPE  kschl
                                                     iv_email              TYPE  adr6-smtp_addr
                                                     iv_sales_organization TYPE  vkorg
                                                     iv_partner_function   TYPE  parvw
                                           EXPORTING ev_subrc              TYPE sy-subrc  ,

      update_cond_rec_with_recipent IMPORTING iv_knumh TYPE knumh
                                              iv_email TYPE  adr6-smtp_addr
                                    EXPORTING ev_subrc TYPE sy-subrc  ,


      create_sap_office_document EXPORTING es_sap_document_id        TYPE  sofolenti1-doc_id
                                 RETURNING VALUE(rs_sap_doc_obj_key) TYPE gty_sofm_object_key ,


      update_rcp_message_obj_email IMPORTING is_sap_doc_obj_key          TYPE  gty_sofm_object_key
                                             iv_message_update_indicator TYPE  ecmupdate
                                             iv_email                    TYPE  adr6-smtp_addr
                                             iv_business_partner         TYPE  kunnr OPTIONAL
                                   EXPORTING ev_subrc                    TYPE	sy-subrc  ,


      create_condition_record IMPORTING iv_sales_organization TYPE  vkorg
                                        iv_business_partner   TYPE  kunnr
                                        iv_partner_function   TYPE  parvw
                                        iv_output_type        TYPE  kschl
                                        iv_sap_office_doc_id  TYPE  so_entryid   ,

      update_condition_record IMPORTING iv_knumh             TYPE knumh
                                        iv_sap_office_doc_id TYPE  so_entryid   ,

      create_email_update_somg_ref IMPORTING iv_email            TYPE  adr6-smtp_addr
                                             iv_business_partner TYPE  kunnr OPTIONAL
                                   CHANGING  cs_somg_rcp_key     TYPE  somgk
                                             cs_somg_rcp_data    TYPE  somgd ,

      create_internet_email_address IMPORTING iv_email              TYPE  adr6-smtp_addr
                                    EXPORTING ev_address_number     TYPE  soes-adrnr
                                              ev_address_obj_type   TYPE  sood-objtp
                                              ev_address_obj_year   TYPE  sood-objyr
                                              ev_address_obj_number TYPE  soos-objno  ,

      get_customer_recipient_email IMPORTING it_output_type_rn        TYPE gtt_output_type_rn
                                             it_kunnr_range           TYPE gtt_kunnr_range
                                             iv_sales_org             TYPE vkorg
                                   RETURNING VALUE(rt_bp_knumh_email) TYPE gtt_bp_knumh_email ,

      create_update_recipient_email IMPORTING iv_customer         TYPE kunnr
                                              iv_sales_org        TYPE vkorg
                                              iv_output_type      TYPE kschl
                                              iv_recipient_email  TYPE adr6-smtp_addr
                                              iv_partner_function TYPE parvw
                                    .

ENDCLASS  .

CLASS lcl_zvv31_recipient_email IMPLEMENTATION  .

  METHOD create_cond_rec_with_recipent  .
    DATA: ls_sap_doc_obj_key TYPE gty_sofm_object_key,
          ls_somg_rcp_key    TYPE somgk,
          ls_somg_rcp_data   TYPE somgd,
          lv_subrc           TYPE sy-subrc,
          lv_sap_document_id TYPE sofolenti1-doc_id.

    ls_sap_doc_obj_key = create_sap_office_document(
      IMPORTING
        es_sap_document_id = lv_sap_document_id    " Folder Entry ID (Obj+Fol+Forwarder Name)
    ).

    update_rcp_message_obj_email(
      EXPORTING
        is_sap_doc_obj_key          = ls_sap_doc_obj_key
        iv_message_update_indicator = 'I'
        iv_email                    = iv_email    " E-Mail Address
      IMPORTING
        ev_subrc                    = lv_subrc
    ).


    create_condition_record(
      EXPORTING
        iv_sales_organization = iv_sales_organization    " Sales Organization
        iv_business_partner   = iv_business_partner    " Customer Number
        iv_partner_function   = iv_partner_function    " Partner Function
        iv_output_type        = iv_output_type    " Condition Type
        iv_sap_office_doc_id  = lv_sap_document_id    " Folder Entry ID (Obj+Fol+Forwarder Name)
    ).


    ev_subrc = lv_subrc .


  ENDMETHOD.

  METHOD update_cond_rec_with_recipent  .

    DATA: ls_sap_doc_obj_key TYPE gty_sofm_object_key,
          ls_somg_rcp_key    TYPE somgk,
          ls_somg_rcp_data   TYPE somgd,
          lv_subrc           TYPE sy-subrc,
          lv_sap_document_id TYPE sofolenti1-doc_id.

    ls_sap_doc_obj_key = create_sap_office_document(
      IMPORTING
        es_sap_document_id = lv_sap_document_id    " Folder Entry ID (Obj+Fol+Forwarder Name)
    ).

    update_rcp_message_obj_email(
      EXPORTING
        is_sap_doc_obj_key          = ls_sap_doc_obj_key
        iv_message_update_indicator = 'I'
        iv_email                    = iv_email    " E-Mail Address
      IMPORTING
        ev_subrc                    = ev_subrc
    ).

    IF ev_subrc = 0  .
      update_condition_record(
        iv_knumh             = iv_knumh
        iv_sap_office_doc_id = lv_sap_document_id
      ).

    ENDIF .


  ENDMETHOD .

  METHOD create_sap_office_document.

    DATA: ls_folder_id        TYPE soodk,
          lv_folder_id_api1   TYPE sofoldati1-object_id,
          ls_object_dat_cha   TYPE sodocchgi2,
          lv_document_type    TYPE sofolenti1-obj_type,
          lv_doc_originator_i TYPE soextreci1-receiver,
          lv_vsi_profile      TYPE vscan_profile,

          ls_object_dat       TYPE sofolenti1,
          lt_objhead          TYPE STANDARD TABLE OF soli,
          lt_objcont          TYPE STANDARD TABLE OF  soli,
          lt_objpara          TYPE STANDARD TABLE OF  selc,
          lt_objparb          TYPE STANDARD TABLE OF  soop1,
          lt_content_hex      TYPE STANDARD TABLE OF solix,
          lt_vsi_error        TYPE vscan_bapiret2_t,

          ls_somg_rcp_data    TYPE somgd,
          ls_somg_rcp_key     TYPE somgk,
          ls_somg_msg_data    TYPE somgd,
          ls_somg_msg_key     TYPE somgk,
          lv_subrc            TYPE sy-subrc,

          ls_usage_pers_ref   TYPE pers_ref,
          lv_adrnr_so_key     TYPE adcp-so_key.



*"Get folder ID for doc creation

    CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
      EXPORTING
*       OWNER                 = ' '
        region                = 'B'
      IMPORTING
        folder_id             = ls_folder_id
      EXCEPTIONS
        communication_failure = 1
        owner_not_exist       = 2
        system_failure        = 3
        x_error               = 4
        OTHERS                = 5.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.



*"Create SAP Office document in folder

    lv_document_type = 'SCR'  .

    MOVE ls_folder_id TO lv_folder_id_api1  .
    ls_object_dat_cha-obj_name = 'NAST' .
    ls_object_dat_cha-obj_descr = 'Invoice List - Ecolab Co.' .

    ls_object_dat_cha-sensitivty = 'F'  .
    ls_object_dat_cha-obj_prio = 9  .


    CALL FUNCTION 'SO_DOC_INSERT_WITH_ORIG_API1'
      EXPORTING
        folder_id                  = lv_folder_id_api1
        document_data              = ls_object_dat_cha
        document_type              = lv_document_type
        originator                 = lv_doc_originator_i
        originator_type            = 'OBJ'
        iv_vsi_profile             = lv_vsi_profile
      IMPORTING
        document_info              = ls_object_dat
      TABLES
        object_header              = lt_objhead
        object_content             = lt_objcont
        contents_hex               = lt_content_hex
        object_para                = lt_objpara
        object_parb                = lt_objparb
        et_vsi_error               = lt_vsi_error
      EXCEPTIONS
        owner_not_exist            = 1
        folder_not_exist           = 2
        document_type_not_exist    = 3
        operation_no_authorization = 4
        parameter_error            = 5
        x_error                    = 6
        enqueue_error              = 7
        OTHERS                     = 8.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.


    MOVE ls_object_dat-doc_id  TO rs_sap_doc_obj_key .
    es_sap_document_id = ls_object_dat-doc_id .




    CALL FUNCTION 'ZINV_GET_SOMG_KEY'
      EXPORTING
        iv_somg_key_objtp = 'MSG'    " Object type
      IMPORTING
        ev_subrc          = lv_subrc    " ABAP System Field: Return Code of ABAP Statements
      CHANGING
        cs_somg_key       = ls_somg_msg_key.    " Key part of SOMG (table for persistence of RECIPIENT)


    ls_somg_msg_key-mandt = sy-mandt  .
    ls_somg_msg_key-objtp = 'MSG' .

    MOVE-CORRESPONDING rs_sap_doc_obj_key TO ls_somg_msg_data  .
    ls_somg_msg_data-foltp = rs_sap_doc_obj_key-folder_type .
    ls_somg_msg_data-folyr = rs_sap_doc_obj_key-folder_year .
    ls_somg_msg_data-folno = rs_sap_doc_obj_key-folder_number .


    ls_somg_msg_data-doctp = rs_sap_doc_obj_key-doc_type .
    ls_somg_msg_data-docyr = rs_sap_doc_obj_key-doc_year .
    ls_somg_msg_data-docno = rs_sap_doc_obj_key-doc_number .


    CALL FUNCTION 'ZINV_SOMG_MODIFICATIONS'
      EXPORTING
        is_somg_key  = ls_somg_msg_key
        is_somg_data = ls_somg_msg_data
*       IS_SOMG_KEY_DEL       =
      IMPORTING
        ev_subrc     = lv_subrc
*       EV_DEL_SUBRC =
      .


  ENDMETHOD .

  METHOD update_rcp_message_obj_email.

    DATA: ls_somg_rcp_key      TYPE somgk,
          ls_somg_rcp_data     TYPE somgd,
          lv_subrc             TYPE sy-subrc,
          lv_del_subrc         TYPE sy-subrc,
          ls_existing_somg_key TYPE somgk.

    MOVE-CORRESPONDING is_sap_doc_obj_key TO ls_somg_rcp_key  .

    "Get existing RCP message entry
    SELECT SINGLE mandt, objtp, objyr, objno FROM somg INTO @ls_existing_somg_key
      WHERE objtp = 'RCP'
        AND foltp = @is_sap_doc_obj_key-folder_type
        AND folyr = @is_sap_doc_obj_key-folder_year
        AND folno = @is_sap_doc_obj_key-folder_number
        AND doctp = @is_sap_doc_obj_key-doc_type
        AND docyr = @is_sap_doc_obj_key-doc_year
        AND docno = @is_sap_doc_obj_key-doc_number  .


    IF iv_message_update_indicator = 'I' OR iv_message_update_indicator = 'U' .

      CALL FUNCTION 'ZINV_GET_SOMG_KEY'
        EXPORTING
          iv_somg_key_objtp = 'RCP'    " Object type
        IMPORTING
          ev_subrc          = lv_subrc    " ABAP System Field: Return Code of ABAP Statements
        CHANGING
          cs_somg_key       = ls_somg_rcp_key.    " Key part of SOMG (table for persistence of RECIPIENT)

      IF lv_subrc <> 0.
        MESSAGE i071(zsb4_msg) WITH iv_business_partner .
      ENDIF.
      ev_subrc = lv_subrc .
      CHECK lv_subrc = 0 .

      create_email_update_somg_ref(
        EXPORTING
          iv_email         = iv_email    " E-Mail Address
        CHANGING
          cs_somg_rcp_key  = ls_somg_rcp_key    " Key part of SOMG (table for persistence of RECIPIENT)
          cs_somg_rcp_data = ls_somg_rcp_data    " Data part of SOMG (table for persistence of RECIPIENT)
      ).

      ls_somg_rcp_key-objtp = 'RCP'.
      ls_somg_rcp_key-mandt = sy-mandt  .
      ls_somg_rcp_data-rcp_snd_tp = 'INT' .
      ls_somg_rcp_data-rcp_seq_no = '001' .

      ls_somg_rcp_data-foltp = is_sap_doc_obj_key-folder_type .
      ls_somg_rcp_data-folyr = is_sap_doc_obj_key-folder_year .
      ls_somg_rcp_data-folno = is_sap_doc_obj_key-folder_number .

      ls_somg_rcp_data-doctp = is_sap_doc_obj_key-doc_type .
      ls_somg_rcp_data-docyr = is_sap_doc_obj_key-doc_year.
      ls_somg_rcp_data-docno = is_sap_doc_obj_key-doc_number .

    ENDIF .

    CASE iv_message_update_indicator  .

      WHEN 'I'  .

        CALL FUNCTION 'ZINV_SOMG_MODIFICATIONS'
          EXPORTING
            is_somg_key  = ls_somg_rcp_key    " Key part of SOMG (table for persistence of RECIPIENT)
            is_somg_data = ls_somg_rcp_data    " Data part of SOMG (table for persistence of RECIPIENT)
*           is_somg_key_del =     " Key part of SOMG (table for persistence of RECIPIENT)
          IMPORTING
            ev_subrc     = lv_subrc    " ABAP System Field: Return Code of ABAP Statements
*            ev_del_subrc =.     " ABAP System Field: Return Code of ABAP Statements
          .
        IF lv_subrc <> 0  .
*          MESSAGE i073(zsb4_msg) WITH iv_business_partner  .
          MESSAGE 'Failed to insert recipient email entry in message object(SOMG) for BP-' && iv_business_partner TYPE 'I'  .
        ENDIF .
      WHEN 'U'  .
        IF ls_existing_somg_key IS NOT INITIAL  .

          CALL FUNCTION 'ZINV_SOMG_MODIFICATIONS'
            EXPORTING
              is_somg_key     = ls_somg_rcp_key    " Key part of SOMG (table for persistence of RECIPIENT)
              is_somg_data    = ls_somg_rcp_data    " Data part of SOMG (table for persistence of RECIPIENT)
              is_somg_key_del = ls_existing_somg_key    " Key part of SOMG (table for persistence of RECIPIENT)
            IMPORTING
              ev_subrc        = lv_subrc    " ABAP System Field: Return Code of ABAP Statements
              ev_del_subrc    = lv_del_subrc.   " ABAP System Field: Return Code of ABAP Statements

          IF lv_del_subrc <> 0  .
            MESSAGE i074(zsb4_msg) WITH iv_business_partner  .
*            MESSAGE 'Failed to delete existing recipient email in message object(SOMG)-BP- &1' && iv_business_partner TYPE 'I'  .
*            MESSAGE 'Failed to delete existing recipient email entry in message object(SOMG) for BP-' && iv_business_partner TYPE 'I'  .
            ev_subrc = lv_del_subrc .
          ELSEIF lv_subrc <> 0  .
*            MESSAGE i075(zsb4_msg) WITH iv_business_partner  .
            MESSAGE 'Failed to update new recipient email entry in message object(SOMG) for BP-' && iv_business_partner TYPE 'I'  .
            ev_subrc = lv_subrc .
          ENDIF.
        ENDIF.

      WHEN 'D'  .
        IF ls_existing_somg_key IS NOT INITIAL  .

          CALL FUNCTION 'ZINV_SOMG_MODIFICATIONS'
            EXPORTING
              is_somg_key_del = ls_existing_somg_key    " Key part of SOMG (table for persistence of RECIPIENT)
            IMPORTING
              ev_del_subrc    = lv_del_subrc.    " ABAP System Field: Return Code of ABAP Statements

          IF lv_del_subrc <> 0  .
*            MESSAGE i074(zsb4_msg) WITH iv_business_partner  .
**            MESSAGE 'Failed to delete existing recipient email in message object(SOMG)-BP- &1' && iv_business_partner TYPE 'I'  .
            MESSAGE 'Failed to delete existing recipient email in message object(SOMG) for BP-' && iv_business_partner TYPE 'I'  .
          ENDIF.
          ev_subrc = lv_del_subrc .
        ENDIF .

    ENDCASE  .

  ENDMETHOD.


  METHOD create_condition_record.

    DATA: l_kschl   TYPE  kschl,
          l_kvewe   TYPE kvewe,
          l_kotabnr TYPE  kotabnr,
          l_kappl   TYPE  kappl.

    DATA: db_time_titab TYPE TABLE OF  titab,
          db_time_vake  TYPE TABLE OF vake,
          xnach_db      TYPE TABLE OF  nach_vb,
          ynach         TYPE TABLE OF nach_vb.

    FIELD-SYMBOLS: <lfs_db_time_titab> TYPE   titab,
                   <lfs_db_time_vake>  TYPE  vake,
                   <lfs_xnach_db>      TYPE  nach_vb,
                   <lfs_ynach>         TYPE  nach_vb.

    DATA: lv_knumh TYPE knumh.

    CONSTANTS: lc_end_date                   TYPE sy-datum VALUE '99991231',
               lc_objpri                     TYPE nach_vb-objpri VALUE '9',
               lc_dispatch_send_periodic_job TYPE nach-vsztp VALUE '1',
               lc_transmission_simplemail    TYPE nach-nacha  VALUE '7',
               lc_insert                     TYPE updkz_d VALUE 'I'.

    CONSTANTS: lc_kotabnr_cond_table TYPE kotabnr VALUE '705',    "Condition table number
               lc_kvewe_komb_output  TYPE kvewe VALUE 'B',        "Condition usage- Output
               lc_kappl_billing      TYPE kappl VALUE 'V3'.       "Condition application- Billing

*"Get the number number range- next number for NACH
    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr = '01'
        object      = 'NACH'
      IMPORTING
        number      = lv_knumh.


    APPEND INITIAL LINE TO db_time_titab ASSIGNING <lfs_db_time_titab> .

    <lfs_db_time_titab>-xxcnindex = '000'.
    <lfs_db_time_titab>-xxdbaction = lc_insert   .    "'I'.


    APPEND INITIAL LINE TO db_time_vake ASSIGNING <lfs_db_time_vake> .
    APPEND INITIAL LINE TO xnach_db ASSIGNING <lfs_xnach_db> .

    l_kvewe = <lfs_db_time_vake>-kvewe = <lfs_xnach_db>-kvewe = lc_kvewe_komb_output  . "'B'.
    l_kotabnr = <lfs_db_time_vake>-kotabnr = <lfs_xnach_db>-kotabnr = lc_kotabnr_cond_table .   "'705'.
    l_kappl = <lfs_db_time_vake>-kappl = <lfs_xnach_db>-kappl = c_bp_kappl_v3 .  "'V3'.
    l_kschl = <lfs_db_time_vake>-kschl = <lfs_xnach_db>-kschl = iv_output_type  .   "ZLRU or

    <lfs_db_time_vake>-vakey = iv_sales_organization && iv_business_partner .

    <lfs_db_time_vake>-datbi = '00000000'.
    <lfs_db_time_vake>-datab = '00000000'.
    <lfs_db_time_vake>-knumh = lv_knumh.   "'0000609835'.


    <lfs_xnach_db>-mandt = sy-mandt.
    <lfs_xnach_db>-knumh = lv_knumh.
    <lfs_xnach_db>-ernam = sy-uname.
    <lfs_xnach_db>-erdat = sy-datum  .

    "VAKEY field in NACH table has been removed in S4HANA system, sio in the upgraded system, below line will not be applicable
    <lfs_xnach_db>-vakey = iv_sales_organization && iv_business_partner   .

    <lfs_db_time_vake>-datab = sy-datum  ."'00000000'.
    <lfs_xnach_db>-datbi = lc_end_date . "'99991231'  .
    <lfs_xnach_db>-parvw = iv_partner_function .   "'RE'.
    <lfs_xnach_db>-nacha = lc_transmission_simplemail  .      "  '7'.
    <lfs_xnach_db>-anzal = '0'.
    <lfs_xnach_db>-vsztp = lc_dispatch_send_periodic_job .  "'1'.

    <lfs_xnach_db>-spras = sy-langu  ."'E'.
    <lfs_xnach_db>-updkz = lc_insert . " 'I'.

    <lfs_xnach_db>-objpri = lc_objpri  .  "'9' .


    "Main step to link SAP Office document to condition record
    <lfs_xnach_db>-tdname = iv_sap_office_doc_id .
    <lfs_xnach_db>-tdarmod = 3 .

    <lfs_xnach_db>-skips = abap_true .

    DATA: lr_error TYPE REF TO cx_root  .
    TRY.
        CALL FUNCTION 'NACHRICHTEN_SICHERN_V13B'
          EXPORTING
            cd_kvewe      = l_kvewe
            cd_kotabnr    = l_kotabnr
            cd_kappl      = l_kappl
            cd_kschl      = l_kschl
          TABLES
            db_time_titab = db_time_titab
            db_time_vake  = db_time_vake
            db_xnach      = xnach_db
            db_ynach      = ynach.

      CATCH cx_root INTO lr_error .
        DATA(ls_msg) = lr_error->get_text( ).

        MESSAGE ls_msg TYPE 'E' .
    ENDTRY  .

    COMMIT WORK AND WAIT  .

  ENDMETHOD .

  METHOD update_condition_record  .

    DATA: l_kschl   TYPE  kschl,
          l_kvewe   TYPE kvewe,
          l_kotabnr TYPE  kotabnr,
          l_kappl   TYPE  kappl.

    DATA: db_time_titab TYPE TABLE OF  titab,
          db_time_vake  TYPE TABLE OF vake,
          xnach_db      TYPE TABLE OF  nach_vb,
          ynach         TYPE TABLE OF nach_vb.

    FIELD-SYMBOLS: <lfs_db_time_titab> TYPE   titab,
                   <lfs_db_time_vake>  TYPE  vake,
                   <lfs_xnach_db>      TYPE  nach_vb,
                   <lfs_ynach>         TYPE  nach_vb.

    DATA: lv_knumh TYPE knumh.

    CONSTANTS: lc_end_date                   TYPE sy-datum VALUE '99991231',
               lc_objpri                     TYPE nach_vb-objpri VALUE '9',
               lc_dispatch_send_periodic_job TYPE nach-vsztp VALUE '1',
               lc_transmission_simplemail    TYPE nach-nacha  VALUE '7',
               lc_upate                      TYPE updkz_d VALUE 'U'.

    APPEND INITIAL LINE TO db_time_titab ASSIGNING <lfs_db_time_titab> .

    <lfs_db_time_titab>-xxcnindex = '000'.
    <lfs_db_time_titab>-xxdbaction = lc_upate  .    "'U'.   "Update the existing NACH entry with new TDNAME- SAP office document details


    APPEND INITIAL LINE TO db_time_vake ASSIGNING <lfs_db_time_vake> .
    APPEND INITIAL LINE TO xnach_db ASSIGNING <lfs_xnach_db> .

*   "Get existing NACH details to update
    SELECT SINGLE knumh, kvewe, kotabnr, kappl, kschl,
      vakey ,
      parvw, parnr, nacha, anzal, vsztp, aende, objpri, tdarmod
      FROM nach INTO @DATA(ls_existing_nach)
      WHERE knumh = @iv_knumh .

    MOVE-CORRESPONDING ls_existing_nach TO <lfs_db_time_vake> .
    MOVE-CORRESPONDING ls_existing_nach TO <lfs_xnach_db> .

    <lfs_xnach_db>-tdname = iv_sap_office_doc_id  .

    DATA: lr_error TYPE REF TO cx_root  .
    TRY.
        CALL FUNCTION 'NACHRICHTEN_SICHERN_V13B'
          EXPORTING
            cd_kvewe      = l_kvewe
            cd_kotabnr    = l_kotabnr
            cd_kappl      = l_kappl
            cd_kschl      = l_kschl
          TABLES
            db_time_titab = db_time_titab
            db_time_vake  = db_time_vake
            db_xnach      = xnach_db
            db_ynach      = ynach.
      CATCH cx_root INTO lr_error .
        DATA(ls_msg) = lr_error->get_text( ).

        MESSAGE ls_msg TYPE 'E' .
    ENDTRY  .

    COMMIT WORK AND WAIT  .


  ENDMETHOD .

  METHOD create_email_update_somg_ref.

    DATA: ls_usage_pers_ref TYPE pers_ref,
          lv_adrnr_so_key   TYPE adcp-so_key.

    create_internet_email_address(
      EXPORTING
        iv_email              = iv_email    " E-Mail Address
      IMPORTING
        ev_address_obj_type   = cs_somg_rcp_data-rcp_id_tp    " Code for document class
        ev_address_obj_year   = cs_somg_rcp_data-rcp_id_yr    " Object: Year from ID
        ev_address_obj_number = cs_somg_rcp_data-rcp_id_no    " Object: Number from ID
    ).


* Only ZAV addresses may have a reference
    CHECK cs_somg_rcp_data-rcp_id_tp = '&AD'.

* Fill usage
    cs_somg_rcp_key-mandt = sy-mandt.

    CLEAR ls_usage_pers_ref.
    ls_usage_pers_ref-pers_group = 'SODI'  .

    ls_usage_pers_ref-appl_table = 'SOMG'.
    ls_usage_pers_ref-appl_field = 'RCP_ID_NO'.

    ls_usage_pers_ref-appl_key   = cs_somg_rcp_key.
    lv_adrnr_so_key = cs_somg_rcp_data-rcp_id_no+2.

* Write reference
    CALL FUNCTION 'SO_ADDRESS_ADD_REFERENCE'
      EXPORTING
        adrnr                   = lv_adrnr_so_key
        usage                   = ls_usage_pers_ref
      EXCEPTIONS
        address_not_exist       = 1
        reference_already_exist = 2
        x_error                 = 3
        OTHERS                  = 4.

    CASE sy-subrc.
      WHEN 0.
*       OK.
      WHEN 2.
*       That means: reference already exists. No problem
      WHEN OTHERS.
*      EXIT_RETURN '2693' SOMG_DATA-RCP_ID_NO SPACE SPACE SPACE.
        MESSAGE 'Could not add recipient email reference to SAP Office Document for BP-' && iv_business_partner TYPE 'I' .
    ENDCASE.



  ENDMETHOD.

  METHOD create_internet_email_address.

    DATA: lo_bas_ref     TYPE REF TO cl_cam_address_bcs,
          ls_usage_ref   TYPE pers_ref,
          lv_vsi_profile TYPE vscan_profile,
          lv_res_sndart  TYPE soes-sndart,
          lv_lfdnr       TYPE soes-lfdnr,
          lv_ext_address TYPE soxda-address.

    TRY.

        CALL METHOD cl_cam_address_bcs=>create_internet_address
          EXPORTING
            i_address_string = iv_email    " Internet Mail (SMTP) Address
          RECEIVING
            result           = lo_bas_ref.    " Reference to BAS Address


      CATCH cx_address_bcs.    "
        MESSAGE i072(zsb4_msg) .  "Failed to create email


    ENDTRY.

    IF lo_bas_ref IS BOUND  .
      TRY.
          DATA(lv_so_key) = lo_bas_ref->getu_so_key( ).
          DATA(lv_cam_adrnr) = lo_bas_ref->get_addrnumber( )  .
          DATA(lv_pernr) = lo_bas_ref->get_persnumber( )  .

        CATCH cx_os_object_not_found.  "
          MESSAGE 'Failed to create email' TYPE 'I'   .
      ENDTRY.
    ENDIF.

    WRITE: 'SO Key- ' , lv_so_key .

    ls_usage_ref-appl_table = 'ADRP'  .
    ls_usage_ref-appl_field = 'PERSNUMBER'  .

    ls_usage_ref-addrnumber = lv_cam_adrnr  .

    lv_ext_address = iv_email .


*  "Get ID address and reference with ADRP
    CALL FUNCTION 'SO_ADDRESS_ID_GET'
      EXPORTING
        address             = lv_ext_address
        address_type        = 'INT'
        no_intern           = abap_true
        usage               = ls_usage_ref
        visname             = lv_vsi_profile
      IMPORTING
        adrtp               = ev_address_obj_type
        adryr               = ev_address_obj_year
        adrno               = ev_address_obj_number
        adrnr               = ev_address_number
        sndart              = lv_res_sndart
        lfdnr               = lv_lfdnr
      EXCEPTIONS
        address_not_found   = 1
        address_not_created = 2
        parameter_error     = 3
        x_error             = 4
        OTHERS              = 5.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.

  METHOD get_customer_recipient_email .

    TYPES:
      BEGIN OF lty_somg_inputs,
        kunnr TYPE kunnr,
        foltp TYPE somg-foltp,
        folyr TYPE somg-folyr,
        folno TYPE somg-folno,
        doctp TYPE somg-doctp,
        docyr TYPE somg-docyr,
        docno TYPE somg-docno,
      END OF lty_somg_inputs  ,
      BEGIN OF lty_adcp_input ,
        kunnr  TYPE kunnr,
        so_key TYPE adcp-so_key,
        kschl  TYPE kschl,
        knumh  TYPE knumh,
        tdname TYPE nach-tdname,
      END OF lty_adcp_input ,
      BEGIN OF lty_nach ,
        knumh  TYPE nach-knumh,
        kschl  TYPE nach-kschl,
        tdname TYPE nach-tdname,
        vakey  TYPE char100,
      END OF lty_nach .

    DATA: lt_somg_inputs TYPE STANDARD TABLE OF lty_somg_inputs,
          lt_adcp_input  TYPE STANDARD TABLE OF lty_adcp_input,
          lt_nach        TYPE STANDARD TABLE OF lty_nach.

************** applicable for Non-HANA system -> Below code for finding the condition record number from NACH table***

*"For non-HANA system, we can directly finf proper KNUMH-condition record number using VAKEY which is nothing but condition key combination
    SELECT kunnr, CAST( vkorg && kunnr AS CHAR( 100 ) ) AS vakey
      FROM knvv
      INTO TABLE @DATA(lt_vakey)
      WHERE kunnr IN @it_kunnr_range AND vkorg = @iv_sales_org .


    SELECT knumh, kschl, tdname, vakey
      FROM nach AS nch
      INTO CORRESPONDING FIELDS OF TABLE @lt_nach
      FOR ALL ENTRIES IN @lt_vakey
      WHERE nch~vakey = @lt_vakey-vakey AND
      kappl = 'V3'         "Billing application
      AND kschl IN @it_output_type_rn .

************** applicable for Non-HANA system-> Above code for finding the condition record number from NACH table *****

************** For HANA systems, to get NACH record keep below code and remove above block of code for non-HANa system**********
*"For HANA systems, VARKEY field is not ther eis NACH table, so to get proper conditionrecord, we will need to know the condition table,
*"and from condition table by providing the key combination data we can get corresponding KNUMH- condition record number

*    SELECT kschl, vkorg, kndnr, knumh FROM b705 INTO TABLE @DATA(lt_b705)
*      WHERE kappl = 'V3' AND kschl IN @it_output_type_rn AND vkorg = @iv_sales_org AND kndnr IN @it_kunnr_range .
*    IF sy-subrc = 0 .
*      SELECT knumh, tdname, kschl FROM nach INTO CORRESPONDING FIELDS OF TABLE lt_nach FOR ALL ENTRIES IN lt_b705 WHERE
*        knumh = @lt_b705-knumh .
*    ENDIF.
************** For HANA systems- to get NACH record*****************************************************************************
    LOOP AT lt_nach ASSIGNING FIELD-SYMBOL(<lfs_nach>)  .

      APPEND INITIAL LINE TO lt_somg_inputs ASSIGNING FIELD-SYMBOL(<lfs_somg_inputs>) .
      <lfs_somg_inputs>-foltp = <lfs_nach>-tdname+0(3)  .
      <lfs_somg_inputs>-folyr = <lfs_nach>-tdname+3(2)  .
      <lfs_somg_inputs>-folno = <lfs_nach>-tdname+5(12)  .
      <lfs_somg_inputs>-doctp = <lfs_nach>-tdname+17(3)  .
      <lfs_somg_inputs>-docyr = <lfs_nach>-tdname+20(2)  .
      <lfs_somg_inputs>-docno = <lfs_nach>-tdname+22(12)  .

******Below code only for HANA system*****************************************
*      READ TABLE lt_b705 INTO DATA(ls_b705) WITH KEY knumh = <lfs_nach>-knumh .
*      <lfs_nach>-vakey = ls_b705-vkorg && ls_b705-kndnr .
******Above code only for HANA system******************************************

    ENDLOOP.

    IF lt_somg_inputs IS NOT INITIAL  .
      SORT lt_somg_inputs BY foltp folyr folno doctp docyr docno .
      SELECT rcp_id_tp, rcp_id_yr, rcp_id_no , foltp, folyr, folno, doctp, docyr, docno
        FROM somg
        FOR ALL ENTRIES IN @lt_somg_inputs WHERE foltp = @lt_somg_inputs-foltp AND folyr = @lt_somg_inputs-folyr
                  AND folno = @lt_somg_inputs-folno AND doctp = @lt_somg_inputs-doctp
                  AND docyr = @lt_somg_inputs-docyr AND docno = @lt_somg_inputs-docno
        INTO TABLE @DATA(lt_somg) .

      LOOP AT lt_somg ASSIGNING FIELD-SYMBOL(<lfs_somg>).

        DATA(lv_tdname) = <lfs_somg>-foltp && <lfs_somg>-folyr && <lfs_somg>-folno && <lfs_somg>-doctp && <lfs_somg>-docyr && <lfs_somg>-docno .
        READ TABLE lt_nach INTO DATA(ls_nach) WITH KEY tdname = lv_tdname .

        IF <lfs_somg>-rcp_id_tp <> 'USR' .

          APPEND INITIAL LINE TO lt_adcp_input ASSIGNING FIELD-SYMBOL(<lfs_adcp>) .
          <lfs_adcp>-kunnr = ls_nach-vakey+4   .
          <lfs_adcp>-so_key = <lfs_somg>-rcp_id_no+2(10)  .
          <lfs_adcp>-kschl = ls_nach-kschl   .
          <lfs_adcp>-knumh = ls_nach-knumh   .
          <lfs_adcp>-tdname = ls_nach-tdname  .
        ENDIF.
        CLEAR: lv_tdname, ls_nach .
      ENDLOOP.

      IF lt_adcp_input IS NOT INITIAL .
        SORT lt_adcp_input BY so_key  .
        SELECT so_key, a6~smtp_addr AS email
          FROM adcp AS ad INNER JOIN adr6 AS a6 ON ad~addrnumber = a6~addrnumber AND ad~persnumber = a6~persnumber
          FOR ALL ENTRIES IN @lt_adcp_input WHERE so_key = @lt_adcp_input-so_key
          INTO TABLE @DATA(lt_adcp_email) .

        LOOP AT lt_adcp_email ASSIGNING FIELD-SYMBOL(<adcp_email>).
          DATA(ls_adcp_input) = VALUE lty_adcp_input( lt_adcp_input[ so_key = <adcp_email>-so_key ] OPTIONAL ).
          APPEND INITIAL LINE TO rt_bp_knumh_email ASSIGNING FIELD-SYMBOL(<lfs_bp_knumh_email>) .
          <lfs_bp_knumh_email>-kunnr = ls_adcp_input-kunnr  .
          <lfs_bp_knumh_email>-mail = <adcp_email>-email .
          <lfs_bp_knumh_email>-kschl = ls_adcp_input-kschl   .
          <lfs_bp_knumh_email>-knumh = ls_adcp_input-knumh .
          <lfs_bp_knumh_email>-tdname = ls_adcp_input-tdname .
          CLEAR: ls_adcp_input  .
        ENDLOOP.
      ENDIF .

    ENDIF.

  ENDMETHOD .

  METHOD create_update_recipient_email  .

    DATA: ls_sofm_object_key TYPE gty_sofm_object_key .

    DATA(lt_kunnr_range) = VALUE gtt_kunnr_range( ( sign = 'I' option = 'EQ' low = iv_customer ) )  .
    DATA(lt_output_type_rn) = VALUE gtt_output_type_rn( ( sign = 'I' option = 'EQ' low = iv_output_type ) )  .
    "Get existing recipient email/ condition record data
    DATA(lt_bp_existing_emails) = get_customer_recipient_email(
      it_output_type_rn = lt_output_type_rn
      it_kunnr_range    = lt_kunnr_range
      iv_sales_org      = iv_sales_org
    ).

    READ TABLE lt_bp_existing_emails INTO DATA(ls_bp_existing_email) INDEX 1  .
    IF sy-subrc = 0 .   "If condition record exist

      IF ls_bp_existing_email-knumh IS NOT INITIAL .    "condition record exists

        IF ls_bp_existing_email-tdname IS NOT INITIAL .
          ls_sofm_object_key = ls_bp_existing_email-tdname .

          IF ls_bp_existing_email-mail IS NOT INITIAL .    "a recipient email already exists, we need to update it then
            DATA(lv_mail_update_ind) = 'U'  .
          ELSE .
            lv_mail_update_ind = 'I' .
          ENDIF .

          update_rcp_message_obj_email(
            EXPORTING
              is_sap_doc_obj_key          = ls_sofm_object_key
              iv_message_update_indicator = lv_mail_update_ind    "update existing recipient email address or insert new recipient email
              iv_email                    = iv_recipient_email
              iv_business_partner         = iv_customer
            IMPORTING
              ev_subrc                    = DATA(lv_subrc)
          ).

        ELSE.   "Condition record is there but SAP office document needs to be created and updated in NACH record

          update_cond_rec_with_recipent(
            EXPORTING
              iv_knumh = ls_bp_existing_email-knumh
              iv_email = iv_recipient_email
            IMPORTING
              ev_subrc = lv_subrc
          ).

        ENDIF .

      ENDIF.
    ELSE. "Condition record is not present, so create it along with the recipient email

      create_cond_rec_with_recipent(
        EXPORTING
          iv_business_partner   = iv_customer
          iv_output_type        = iv_output_type
          iv_email              = iv_recipient_email
          iv_sales_organization = iv_sales_org
          iv_partner_function   = iv_partner_function
        IMPORTING
          ev_subrc              = lv_subrc
      ).
    ENDIF .

    IF lv_subrc = 0 .
      MESSAGE 'Recipient email is updated successfully' TYPE 'I' .
    ELSE.
      MESSAGE 'Recipient email update failed' TYPE 'E' .
    ENDIF.

  ENDMETHOD .

ENDCLASS  .
